Eloquent 是一个 ActiveRecord ORM 框架，ORM 全称是 Object Relational Mapping，意为对象关系映射，用于实现面向对象编程语言里不同类型系统的数据之间的转换，
简单来说，它会构建类与数据表之间的映射关系，从而建立起一个可在编程语言里使用的「虚拟对象数据库」。
「ActiveRecord」是 ORM 的一种实现模式，Eloquent 则是 Laravel 版的「ActiveRecord」。

一个 Eloquent 模型类映射一张数据表，通过模型类提供的方法，你可以获取其映射的数据表的所有记录，也可以获取单条记录，
还可以创建、更新和删除对应数据表记录，而这一切都不需要你编写任何 SQL 语句、或者构建查询构建器即可完成。

Eloquent 专注于简单，并且和其他框架一样遵循「约定优于配置」，从而允许你通过最少的代码构建功能强大的模型类。

你可能对「约定优于配置」这个理念不太了解，看几个例子就明白了，比如模型类映射的表名、主键、关联关系、日期格式系统都约定好了，
一般而言，遵循这个约定，你就可以不用做任何配置、编写任何额外代码即可完成功能，结合我们平时怎么创建使用模型类的，就可以更好的理解这一理念了。

創建模型檔案:
php artisan make:model Models/Post

模型檔案創建好後，就可以進行新增刪除修改了，這就約定優於配置

Eloquent 约定模型类映射表名是将类名由驼峰格式转化为小写+下划线（含多个单词的话），最后将其转化为复数形式，
比如 Post 对应表名是 posts、PostTag 对应表名是 post_tags 等等。
当然，如果你不想遵循这个系统约定的规则，也可以通过手动设置模型类属性的方式进行自定义
protected $table = 'articles';

Eloquent 默认假设每张数据表都有一个整型的自增主键，其字段名为 id，如果你的数据表主键名不是 id，可以通过 $primaryKey 属性来指定：
protected $primaryKey = 'post_id';
public $incrementing = false;                                             //主鍵不是自增的 可以改成flase
protected $keyType = 'string';                                            //主鍵不是整數 也可改成字串

Eloquent 默认约定每张表都有 created_at 和 updated_at 字段（迁移类中 $table->timestamps() 会生成这两个字段），并且在保存模型类时会自动维护这两个字段。
如果你的数据表里面不包含这两个字段，或者只包含一个，都需要设置 $timestamps 属性为 false
public $timestamps = false;

默认时间的存储格式是 Y-m-d H:i:s，你还可以通过 $dateFormat 属性来自定义时间戳的格式，该属性值通过 PHP 的 date() 函数进行解析，
所以原则上支持 date 函数支持的所有语法格式，比如将时间设置为 Unix 时间戳
protected $dateFormat = 'U';

Eloquent 模型类默认约定的数据库连接是 config/database.php 中配置的默认连接
通过 $connection 属性为模型类指定使用哪个資料庫
protected $connection = 'connection_name';

到controller的最上方新增路徑
use app/Models/Post                                                       //這樣就能使用Post面向了
$posts = Post::all();                                                     //获取一张表的所有记录  (上面的第21行 可以指定哪個表)

Post::chunk(10, function ($posts) {                                       //如果结果集很大的话，模型类也支持通过 chunk 方法分块获取查询结果
   foreach ($posts as $post) {
       if ($post->views == 0) {
           continue;
       } else {
           dump($post->title . ':' . $post->views);
       }
   }
});
foreach (Post::cursor() as $post) {                                       //通过 cursor 方法每次只获取一条查询结果，从而最大限度减少内存消耗
    dump($post->title . ':' . $post->content);
}
$posts = Post::where('views', '>', 0)->select('id', 'title', 'content')->get();
$user = User::where('name', '学院君')->first();                            //拿第一筆
$user = User::find(1);                                                    //查询的条件是主键 ID 的话，可以通过 find 方法来实现
模型类查询结果为空会返回 null。如果你想要在单条记录返回结果为空时返回 404 响应（在控制器方法中可能需要用到类似操作），
可以通过 firstOrFail 或者 findOrFail 方法在找不到对应记录时抛出 404 异常，从而简化代码编写：
$user = User::findOrFail(111);

$post = new App\Post;                                                      //insert功能
$post->title = '测试文章标题';
$post->content = '测试文章内容';
$post->user_id = 1;
$post->save();

['title' => '测试文章标题',                                                 //假設這個是request的其中一筆資料
 'content' => '测试文章内容']
$post = new Post($request->all());                                         //批量設定值 會套用白名單黑名單 依照傳入的request數值直接對應資料庫，但名稱要跟資料庫的欄位名稱一樣 

白名单属性就是该属性中指定的字段才能应用批量赋值，不在白名单中的属性会被忽略
黑名单属性指定的字段不会应用批量赋值，不在黑名单中的属性则会应用批量赋值
protected $fillable = [];                                                  //白名單預設    频繁变动的数据表，建议使用白名单
protected $guarded = ['*'];                                                //黑名單預設    相对稳定或者字段很多的数据表，建议使用黑名单但是每次修改数据表结构的时候都要记得维护这个黑名单

$post = Post::findOrFail(11);                                              //update 也是用批量賦值的方式 也一樣會套用白名單黑名單
$post->fill($request->all());
$post->save();

軟刪除:                                                                     //只刪除邏輯，物理不刪除
所谓物理删除就是彻底删除该记录，逻辑删除只是给这条记录打上一个「已删除」的标记，不再出现在查询结果中，但是并没有真正删除这条记录。
php artisan make:migration alter_posts_add_deleted_at --table=posts
Schema::table('posts', function (Blueprint $table) {
   $table->softDeletes();
});
php artisan migrate 命令即可在 posts 表中新增一个 deleted_at 字段。该字段默认值为 NULL，表示没有被软删除。
如果要在模型类中支持软删除，需要在对应模型类（在本例中是 Post 模型）中添加支持软删除的 Trait：
use Illuminate\Database\Eloquent\SoftDeletes;
class Post extends Model
{
    use SoftDeletes;
    protected $guarded = ['user_id'];
}
$post = Post::findOrFail(32);                                               //刪除 原本的刪除是物理刪除 但只要面向有加上SoftDeletes 刪除就變成軟刪除了
$post->delete();
if ($post->trashed()) {
    dump('该记录已删除');
}
$post = Post::withTrashed()->find(32);                                     //可以查到已經被軟刪除的資料
$post = Post::onlyTrashed()->where('views', 0)->get();                     //只需要获取被软删除的记录，这可以通过 onlyTrashed 方法来实现
$post->restore();                                                          // 恢复单条记录
Post::onlyTrashed()->where('views', 0)->restore();                         // 恢复多条记录
$post->forceDelete();                                                      //物理刪除
