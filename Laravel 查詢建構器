查詢建構器:
$users = DB::table('users')->get();
$users = DB::table('users')->where('name', 'IU')->get();                                            //get all
$user = DB::table('users')->where('name', 'IU')->first();                                           //返回查詢的第一筆
$user = DB::table('users')->select('id', 'name', 'email')->where('name', 'IU')->first();            //指定要拿到的欄位
$flag = DB::table('users')->insert([                                                                //新增
    'name' => str_random(10),
    'email' => str_random(8) . '@163.com',
    'password' => bcrypt('secret')
]);
$userId = DB::table('users')->insertGetId([                                                         //插入之后获取对应记录的主键 ID
    'name' => str_random(10),
    'email' => str_random(8) . '@qq.com',
    'password' => bcrypt('secret')
]);
DB::table('users')->insert([                                                                        //一次多個新增 但只要有一條報錯 全部都不會新增成功
    ['name' => str_random(10), 'email' => str_random(8) . '@qq.com', 'password' => bcrypt('123')],
    ['name' => str_random(10), 'email' => str_random(8) . '@qq.com', 'password' => bcrypt('456')],
    ['name' => str_random(10), 'email' => str_random(8) . '@qq.com', 'password' => bcrypt('789')],
]);
$affectedRows = DB::table('users')->where('id', '>', 13)->update(['name' => str_random(8)]);        //更新資料 會返回受影響行數(返回行數我是覺得沒啥用)
$affectedRows = DB::table('users')->where('id', '>=', $id)->delete();                               //刪除資料 同上
$affectedRows = DB::table('users')->truncate();                                                     //設定重置自增id回歸1
$email = DB::table('users')->where('name', 'IU')->value('email');                                   //返回指定字段的值
$exists = DB::table('users')->where('name', 'IU')->exists();                                        //判断某个字段值在数据库中是否存在对应记录 在true 不在false
$users = DB::table('users')->where('id', '<', 10)->pluck('name', 'id');                             //可以把id跟name變成有鍵值的数组['100'=>'IU','700'=>'Taeyeon'] //類似php的array_column
$num = DB::table('users')->count();                                                                  
$sum = DB::table('users')->sum('id');   
$avg = DB::table('users')->avg('id');     
$min = DB::table('users')->min('id');     
$max = DB::table('users')->max('id');     
DB::table('posts')->where('views', 0)->get();                                                       //此处等号可以省略
DB::table('posts')->where('views', '>', 0)->get();  
DB::table('posts')->where('views', '<>', 0)->get();
DB::table('posts')->where('title', 'like', 'Laravel学院%')->get();
DB::table('posts')->where('id', '<', 10)->where('views', '>', 0)->get();
DB::table('posts')->where([
    ['id', '<', 10],
    ['views', '>', 0]
])->get();
DB::table('posts')->where('id', '<', 10)->orWhere('views', '>', 0)->get();
DB::table('posts')->whereBetween('views', [10, 100])->get();
DB::table('posts')->whereIn('user_id', [1, 3, 5, 7, 9])->get();
DB::table('users')                                                      //select * from `users` where exists (select 1 from `posts` where posts.user_id = users.id);
    ->whereExists(function ($query) {                                   //用于查询发布过文章的用户
        $query->select(DB::raw(1))
            ->from('posts')
            ->whereRaw('posts.user_id = users.id');
    })
->get();
