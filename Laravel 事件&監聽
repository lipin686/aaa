先說明事件用意:
laravel的事件功能实际上更倾向是一种管理手段，并不是没了它我们就做不到了，只是它能让我们做得更加好，更加优雅。
假設今天突然有個要求，要在使用者登入後，頁面瀏覽人數要+1(統計瀏覽此頁面總人數)
下意識會想要在controller直接下指令，在判斷使用者登入後面新增指令，當然可以，但通常登入已經要做很多判斷了，
又要在裡面寫一個跟登入不相關的指令，
所以這時候事件就誕生了，監聽使用者的行為執行所需功能，封裝程式，在controller只要打一行程式就可以知道這裡要跑事件
還可以允許使用非同步完成，可以加快運行

Eloquent 模型类上进行查询、插入、更新、删除操作时，会触发相应的模型事件
包括:
retrieved：获取到模型实例后触发
creating：插入到数据库前触发
created：插入到数据库后触发
updating：更新到数据库前触发
updated：更新到数据库后触发
saving：保存到数据库前触发（插入/更新之前，无论插入还是更新都会触发）
saved：保存到数据库后触发（插入/更新之后，无论插入还是更新都会触发）
deleting：从数据库删除记录前触发
deleted：从数据库删除记录后触发
restoring：恢复软删除记录前触发
restored：恢复软删除记录后触发
注：批量更新时不会触发相应事件，因为是直接走查询构建器完成的，绕过了模型方法。
// app/Providers/EventServiceProvider.php

public function boot()
{
    parent::boot();

    // 监听模型获取事件
    User::retrieved(function ($user) {
        Log::info('从模型中获取用户[' . $user->id . ']:' . $user->name);
    });
}
