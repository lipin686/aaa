例子 A匯錢給B 資料庫:A-1000 B+1000 兩個指令 其中一個失敗 兩個指令都要失敗 這時候就需要有以下原則

Atomicity (原子性) : 資料操作不能只有部分完成。一次的 transaction 只能有兩種結果：成功或失敗
Consistency (一致性)：transaction 完成前後，資料都必須永遠符合 schema 的規範，保持資料與資料庫的一致性
Isolation (隔離性)：資料庫允許多個 transactions 同時對其資料進行操作，但也同時確保這些 transaction 的交叉執行，不會導致數據的不一致
Durability (耐久性)：transaction 完成後，對資料的操作就是永久的，即便系統故障也不會丟失

事務的隔離級別，mysql默認的隔離級別是什麼？
讀未提交(Read uncommitted)，一個事務可以讀取另一個未提交事務的數據，最低級別，任何情況都無法保證。
讀已提交(Read committed)，一個事務要等另一個事務提交後才能讀取數據，可避免髒讀的發生。
可重複讀(Repeatable read)，就是在開始讀取數據（事務開啟）時，不再允許修改操作，可避免髒讀、不可重複讀的發生。
串行(Serializable)，是最高的事務隔離級別，在該級別下，事務串行化順序執行，可以避免髒讀、不可重複讀與幻讀。但是這種事務隔離級別效率低下，比較耗資料庫性能，一般不使用。

Mysql的默認隔離級別是Repeatable read。

說一說髒讀、不可重複讀、幻讀
髒讀：事務A讀取了事務B更新的數據，然後B回滾操作，那麼A讀取到的數據是髒數據；
不可重複讀：事務 A 多次讀取同一數據，事務 B 在事務A多次讀取的過程中，對數據作了更新並提交，導致事務A多次讀取同一數據時，結果因此本事務先後兩次讀到的數據結果會不一致；
幻讀：幻讀解決了不重複讀，保證了同一個事務里，查詢的結果都是事務開始時的狀態（一致性）；


Atomicity (原子性) :
START TRANSACTION;                                                                  //包起來就可以去判斷裡面是否有錯誤產生
UPDATE deposit_table set deposit = deposit - 1000 WHERE name = 'A';
UPDATE deposit_table set deposit = deposit + 1000 WHERE name = 'B';
COMMIT;                                                                             //commit會確定執行上面的程式 但!!!!會不管有無出錯 正確的會送出 並不會回滾(取消這次行為) 不會達成原子性
                                                                                    //所以要用下面的來達成

# 創建一個存儲過程
CREATE DEFINER=`root`@`localhost` PROCEDURE `insert_test`()
BEGIN
# 創建一個標誌符，出現錯誤就將其置為 1
DECLARE err_flg INTEGER;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET err_flg = 1;                          //讀取錯誤發生
START TRANSACTION;                                                                  //這個很重要!! 一定要打 這才能把下面多個指令變成事務 不然mysql會使用隱式事務 自動提交每個指令
INSERT INTO deposit_table VALUES('C', 7000);
INSERT INTO deposit_table VALUES('D', 8000);
INSERT INTO deposit_table VALUES('D', 9000);                                        //這裡D衝突 發生錯誤 
# 發生錯誤，回滾事務
IF err_flg = 1 THEN
SELECT 'SQL Err Invoked'; # 錯誤提示信息
ROLLBACK;                                                                           //有錯誤會回滾 把指令都刪除 就不會發生其中正確的寫入到資料庫
SELECT * FROM deposit_table;
# 沒有發生錯誤，直接提交
ELSE
SELECT 'TRANSACTION Success';
COMMIT;                                                                             //如果沒有錯誤 這裡才會正式執行程式
SELECT * FROM deposit_table;
END IF;
END

Consistency (一致性):
# 表 a，b 的定義略過
//讀取時 得到的結果要麼是 a_old b_old （表明事務已回滾或者正在執行），要麼是 a_new b_new （表明事務已經成功提交），而不會出現 a_old b_new 以及 a_new b_old 這兩種情況。
START TRANSACTION;
UPDATE a SET name = 'a_new' WHERE name = 'a_old';
UPDATE b SET name = 'b_new' WHERE name = 'b_old';
COMMIT;                                                                             
