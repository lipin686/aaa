Eloquent 模型支持的关联关系包括以下七种：

一对一
一对多
多对多
远层一对多
多态关联（一对一）
多态关联（一对多）
多态关联（多对多）

一對一
例子:我只有一個身分證號碼，身分證號碼對應的就是我 
在 User 模型类中通过 hasOne 方法定义其与 UserProfile 的一对一关联：
public function profile()
{
    return $this->hasOne(UserProfile::class);
}

User 模型实例上通过关联方法名作为动态属性访问与其对应的 UserProfile 模型实例了：
$user = User::findOrFail(1);
$profile = $user->profile;                                                      //這個名稱就是上面的方法名稱
這樣就拿到profile裡面對應id的資料了

底層:
public function hasOne($related, $foreignKey = null, $localKey = null)
$related:要指定的資料表
$foreignKey:對方要關聯的欄位(默認是自己的資料表名稱加上 _id 例user_id)
$localKey:自己要關聯的欄位(默認是私鑰，默認是id)
所以如果對方的資料表欄位對應的不是自己資料表名稱加上 _id 或是私鑰不是id，就要寫成這樣:
return $this->hasOne(UserProfile::class,'user1111_id','uid');                   //盡量依照默認的去設定，比較有規律，也好管理，如果真的不一樣那就要這樣設定

有时候我们可能需要反过来通过 UserProfile 反查所属的 User 模型
我们在 UserProfile 模型类定义其与 User 模型的关联如下：
public function user()                                                          //這個方法名稱可以自訂，呼叫的時候一致即可
{
    return $this->belongsTo(User::class);
}

$profile = UserProfile::findOrFail(2);
$user = $profile->user;                                                         //呼叫模型裡的方法

一對多:
例子:一个用户可以发布多篇文章，反过来，一篇只能归属于一个用户

public function posts()
{
    return $this->hasMany(Post::class);                                         //hasOne改成hasMany就可 Post裡面的belongsTo不用改 可以想像成對方只能隸屬於一個對象 所以跟一對一 一樣
}                                                                               //而使用者從一對一變成一對多 所以就要改成hasMany 

多對多:
例子:每篇文章设置标签，一篇文章往往有多个标签，反过来，一个标签可能会归属于多篇文章
多对多需要借助一张中间表才能建立关联关系
現在有三個表分別是 posts post_tags tags
先到 Post模型設定
public function tags()
{
    return $this->belongsToMany(Tag::class, 'post_tags');                       //第一個參數要指向要查詢的 也就是tag模型
}                                                                               //第二個參數插入變成指定中間的關聯表，後面欄位的跟上面的一樣
再來到Tag模型中設定
public function posts()
{
    return $this->belongsToMany(Post::class, 'post_tags');                       //概念一樣 但是第二個參數插入變成指定中間的關聯表，後面欄位的一樣
}
public function tags()
{
    return $this->belongsToMany(Tag::class, 'post_tags')->withPivot('user_id')->withTimestamps();     //如果要拿到中間表的資料 可以用withPivot去抓 或是有時間戳專用的withTimestamps
}
要獲取中間表資料 $tags->pivot->user_id
如果覺得pivot不喜歡 也可自訂名稱
$this->belongsToMany(Tag::class, 'post_tags')->as('taggable')->withTimestamps();
$tags->taggable->created_at   

远层一对多关联:
例子:國家 使用者 文章 三個表 一個國家有多個使用者，使用者只能一個國家(一對多)，使用者能有多個文章，文章只能一個使用者發布(一對多)
國家->使用者->文章  當我需要拿到這個國家全部的文章時 這樣就是遠層一對多關聯
在國家countries表的Country模型類新增:
public function posts()
{
    return $this->hasManyThrough(Post::class, User::class);                                             //第一個是遠層的面向 第二個是中間的面向 國家->使用者->文章
}

一对一的多态关联 跟一對多的多態關聯


例子:使用者只能有一個頭像，頭像也對應使用者，所以有一個 users表跟images表 一對一 
這時候影片也要有一個縮略圖(也是一對一)，不可能單獨為這個開一個表，都要統一放在images表裡，這樣我就要修改images表的結構
不只有影片有圖片，其他地方也會有，那我不就要新增到死。
這時候多態關聯在這就派上用場
在images表中新增 image_type和image_id
image_type是指定是哪一個人的圖片 像是使用者、影片、公告等等
image_id是type指定的表中 對應的id
這樣就能區分哪個表 哪個對象的圖片，之後就只要改變這兩個欄位就可以應用全部情況了

一對一跟一對多的差異是 這張表裡面會不會有多筆同一個對象的資料
像是使用者只能有一個頭像，頭像也對應使用者 影片對應圖片 這樣就是使用一對一多態關聯
歌手頁面可以多個評論 評論這張表中就會有多個該文章的id 
另一個歌曲頁面也可以有多個評論 也是放在評論表中， 歌手頁面 <- 評論 -> 歌曲頁面  都是一對多 
這樣就是一對多多態關聯


images表新增欄位 
Schema::create('images', function (Blueprint $table) {
    $table->increments('id');
    $table->string('url')->comment('图片URL');
    $table->morphs('imageable');                                                //這個會新增imageable_type和imageable_id
    $table->timestamps();
});

images面向
public function imageable()
{
    return $this->morphTo();
}
一對一
user和video面向:
public function image()
{
    return $this->morphOne(Image::class, 'imageable');                            //對應資料表中的morphs名稱
}

一對多
singer和song面向:                                                                  //假設換成歌手頁面跟歌曲頁面 因為上面的頭像和影片圖片 是一對一 跟這個一對多不符合
public function comments()
{
    return $this->morphMany(Comment::class, 'commentable');                       //對應資料表中的morphs名稱
}

執行就跟之前的一樣 以下是範例:
$post = Post::with('comments')->findOrFail(23);                                   //拿到Post表中id=23的 把id=23丟到comments表中morphs裡面對應的commentable_id 
                                                                                  //因為是從Post面向丟過來的 所以也會比對commentable_type=App\Post
$comments = $post->comments;                                                      //比對符合commentable_id=23然後顯示出comments表中的對應資料
對應SQL語法:
select * from `comments`
    where `comments`.`commentable_id` in (23)                                     
    and `comments`.`commentable_type` = "App\Post"                                 

多对多的多态关联
中间表只需要一个标签 ID 和文章 ID 即可建立它们之间的关联，
但当我们添加新的内容类型，比如页面、视频、音频，它们也有标签，而且完全可以共享一张标签表，
此时仅仅一个文章 ID 已经满足不了定义内容与标签之间的关联了，
所以此时引入多对多的多态关联，和前面两种多态关联思路一样，只是在多对多关联中，我们需要在中间表中引入类型字段来标识内容类型，
将原来的文章ID调整为内容ID，这样就可以从数据库层面满足不同内容类型与标签之间的关联了。

原本多對多是 文章 -> 中間表 <-標籤
多對多多態關聯是 文章 -> 標籤中間表 <- 標籤 或是更多指向標籤中間表的

在標籤中間表裡面一樣新增morphs就可達成共用標籤的功能 

